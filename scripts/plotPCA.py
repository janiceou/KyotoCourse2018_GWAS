import pandas as pd
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.markers import TICKLEFT, TICKRIGHT, TICKUP
import argparse
import numpy as np

# Plot result of PCA generated by plink1.9
# Yoichiro Kamatani 2018
# Written for Kyoto course on Bioinformatics 2018.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted.

def plotPCA(eigvecF, poplabF, prefix):
    df = pd.read_table(eigvecF, header=None, sep="\s+")
    pop = pd.read_table(poplabF)
    df1 = pd.merge(pd.DataFrame({'ID':pop.Sample, 'pops':pop.Population}), df, left_on='ID', right_on=0, how="right")
    df1.pops = df1.pops.fillna("sample")

    cmap = plt.get_cmap('jet')
    colors = cmap(np.linspace(0, 1.0, 27))
    markers = [".", ",", "o", "v", "^", "<", ">", "1", "2", "3", "4", "8", "s", "p", "P", "*", 
               "h", "H", "+", "x", "X", "D", "d", "|", "_", TICKLEFT, TICKRIGHT, TICKUP]
    poplabs = df1.pops.value_counts().index

    # ALL plot
    plt.figure(figsize=(10,10))
    for p, tcol, tmak in zip(poplabs, colors, markers):
        plt.scatter(df1.loc[df1.pops == p,2],
                    df1.loc[df1.pops == p,3],
                    color = tcol, label = p, marker = tmak)
    plt.legend()
    plt.xlabel("PC1")
    plt.ylabel("PC2")
    plt.savefig('%s.ALL.png' % prefix)
    
    # EAS plot
    plt.figure(figsize=(10,10))

    for p in ["JPT", "CHB", "CHS", "CDX", "KHV"]:
        plt.scatter(df1.loc[df1.pops == p ,2],
                    df1.loc[df1.pops == p, 3], label=p)
    plt.scatter(df1.loc[df1.pops == "sample" ,2],
                df1.loc[df1.pops == "sample", 3], label="sample", marker="+")
    plt.legend()
    plt.xlabel("PC1")
    plt.ylabel("PC2")
    plt.savefig('%s.EAS.png' % prefix)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--eigvec', action='store', default=None, type=str)
    parser.add_argument('--poplab', action='store', default=None, type=str)
    parser.add_argument('--out', action='store', default='tmp', type=str)
    args = parser.parse_args()
    
    plotPCA(args.eigvec, args.poplab, args.out)